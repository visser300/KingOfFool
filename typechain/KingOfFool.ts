/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KingOfFoolInterface extends utils.Interface {
  contractName: "KingOfFool";
  functions: {
    "depositEth()": FunctionFragment;
    "depositUSDC(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedETH(address,uint256)": EventFragment;
    "ReceivedUSDC(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedUSDC"): EventFragment;
}

export type ReceivedETHEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type ReceivedETHEventFilter = TypedEventFilter<ReceivedETHEvent>;

export type ReceivedUSDCEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; arg1: BigNumber }
>;

export type ReceivedUSDCEventFilter = TypedEventFilter<ReceivedUSDCEvent>;

export interface KingOfFool extends BaseContract {
  contractName: "KingOfFool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KingOfFoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUSDC(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositEth(overrides?: CallOverrides): Promise<void>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedETH(address,uint256)"(
      arg0?: null,
      arg1?: null
    ): ReceivedETHEventFilter;
    ReceivedETH(arg0?: null, arg1?: null): ReceivedETHEventFilter;

    "ReceivedUSDC(address,uint256)"(
      arg0?: null,
      arg1?: null
    ): ReceivedUSDCEventFilter;
    ReceivedUSDC(arg0?: null, arg1?: null): ReceivedUSDCEventFilter;
  };

  estimateGas: {
    depositEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
